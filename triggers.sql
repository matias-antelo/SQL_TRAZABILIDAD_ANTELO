-- CREACION DE TABLAS ESPEJOS PARA AUDITORIAS.
-- tabla para auditar cambios en STOCK_CEPAS
CREATE TABLE IF NOT EXISTS STOCK_CEPAS_AUDITORIA (
    ID_AUDITORIA INT AUTO_INCREMENT PRIMARY KEY,
    ID_STOCK INT,                 
    MOO_ID INT,
    NUMERACION INT,
    FECHA_RECEPCION DATE,
    FECHA_VTO DATE,
    FECHA_RECONSTITUCION DATE,
    ID_PRUEBAS INT,
    RESULTADO VARCHAR(500),
    OBSERVACIONES VARCHAR(500),
    ID_ANALISTA INT,
    USUARIO VARCHAR(100),          -- Usuario que hizo la acción
    FECHA DATETIME,                -- Momento exacto del cambio
    ACCION VARCHAR(200)            -- Descripción de la acción (insert/eliminación)
);

-- tabla para auditar cambios en CEPA_RESERVA
CREATE TABLE IF NOT EXISTS CEPA_RESERVA_AUDITORIA (
    ID_AUDITORIA INT AUTO_INCREMENT PRIMARY KEY,
    ID_RESERVA INT,
    ID_STOCK INT,
    NUMERO_ALICUOTA VARCHAR(10),
    FECHA_RECONSTITUCION DATE,
    ID_OBSERVACION INT,
    ID_ANALISTA INT,
    USUARIO VARCHAR(100),       -- Usuario que realizó la acción
    FECHA DATETIME,             -- Momento exacto de la acción
    ACCION VARCHAR(200)         -- Texto con la acción realizada
);

-- tabla para auditar cambios en CEPA_TRABAJO
CREATE TABLE IF NOT EXISTS CEPA_TRABAJO_AUDITORIA (
    ID_AUDITORIA INT AUTO_INCREMENT PRIMARY KEY,
    ID_TRABAJO INT,
    NIVEL INT,
    ID_RESERVA_ORIGEN INT,
    ID_TRABAJO_ORIGEN INT,
    FECHA_ACTIVACION DATE,
    ID_PRUEBAS INT,
    RESULTADO VARCHAR(500),
    ID_OBSERVACIONTRABAJO INT,
    ID_ANALISTA INT,
    FECHA_BAJA DATE,
    USUARIO VARCHAR(100),     -- Usuario que hizo la acción
    FECHA DATETIME,           -- Momento de la acción
    ACCION VARCHAR(200)       -- Acción realizada
);

-- TRIGGERS PARA AUDITORIAS
-- Trigger para auditar inserciones en STOCK_CEPAS
DELIMITER //

CREATE TRIGGER tr_insert_stock_cepas
AFTER INSERT ON STOCK_CEPAS
FOR EACH ROW
BEGIN
    INSERT INTO STOCK_CEPAS_AUDITORIA (
        ID_STOCK, MOO_ID, NUMERACION, FECHA_RECEPCION, FECHA_VTO, 
        FECHA_RECONSTITUCION, ID_PRUEBAS, RESULTADO, OBSERVACIONES, ID_ANALISTA,
        USUARIO, FECHA, ACCION
    )
    VALUES (
        NEW.ID_STOCK, NEW.MOO_ID, NEW.NUMERACION, NEW.FECHA_RECEPCION, NEW.FECHA_VTO, 
        NEW.FECHA_RECONSTITUCION, NEW.ID_PRUEBAS, NEW.RESULTADO, NEW.OBSERVACIONES, NEW.ID_ANALISTA,
        USER(), NOW(), 'Se insertó nueva cepa'
    );
END //

DELIMITER ;
-- Trigger para auditar eliminaciones en STOCK_CEPAS
DELIMITER //

CREATE TRIGGER tr_delete_stock_cepas
BEFORE DELETE ON STOCK_CEPAS
FOR EACH ROW
BEGIN
    INSERT INTO STOCK_CEPAS_AUDITORIA (
        ID_STOCK, MOO_ID, NUMERACION, FECHA_RECEPCION, FECHA_VTO, 
        FECHA_RECONSTITUCION, ID_PRUEBAS, RESULTADO, OBSERVACIONES, ID_ANALISTA,
        USUARIO, FECHA, ACCION
    )
    VALUES (
        OLD.ID_STOCK, OLD.MOO_ID, OLD.NUMERACION, OLD.FECHA_RECEPCION, OLD.FECHA_VTO, 
        OLD.FECHA_RECONSTITUCION, OLD.ID_PRUEBAS, OLD.RESULTADO, OLD.OBSERVACIONES, OLD.ID_ANALISTA,
        USER(), NOW(), 'Se eliminó la cepa'
    );
END //

DELIMITER ;

-- Trigger para auditar inserciones en CEPA_RESERVA
DELIMITER //

CREATE TRIGGER tr_insert_cepa_reserva
AFTER INSERT ON CEPA_RESERVA
FOR EACH ROW
BEGIN
    INSERT INTO CEPA_RESERVA_AUDITORIA (
        ID_RESERVA, ID_STOCK, NUMERO_ALICUOTA, FECHA_RECONSTITUCION, 
        ID_OBSERVACION, ID_ANALISTA, USUARIO, FECHA, ACCION
    )
    VALUES (
        NEW.ID_RESERVA, NEW.ID_STOCK, NEW.NUMERO_ALICUOTA, NEW.FECHA_RECONSTITUCION, 
        NEW.ID_OBSERVACION, NEW.ID_ANALISTA, CURRENT_USER(), NOW(), 'Se insertó nueva reserva'
    );
END //

DELIMITER ;

-- Trigger para auditar eliminaciones en CEPA_RESERVA
DELIMITER //

CREATE TRIGGER tr_delete_cepa_reserva
BEFORE DELETE ON CEPA_RESERVA
FOR EACH ROW
BEGIN
    INSERT INTO CEPA_RESERVA_AUDITORIA (
        ID_RESERVA, ID_STOCK, NUMERO_ALICUOTA, FECHA_RECONSTITUCION, 
        ID_OBSERVACION, ID_ANALISTA, USUARIO, FECHA, ACCION
    )
    VALUES (
        OLD.ID_RESERVA, OLD.ID_STOCK, OLD.NUMERO_ALICUOTA, OLD.FECHA_RECONSTITUCION, 
        OLD.ID_OBSERVACION, OLD.ID_ANALISTA, CURRENT_USER(), NOW(), 'Se eliminó una reserva'
    );
END //

DELIMITER ;

-- Trigger para auditar inserciones en CEPA_TRABAJO
DELIMITER //

CREATE TRIGGER tr_insert_cepa_trabajo
AFTER INSERT ON CEPA_TRABAJO
FOR EACH ROW
BEGIN
    INSERT INTO CEPA_TRABAJO_AUDITORIA (
        ID_TRABAJO, NIVEL, ID_RESERVA_ORIGEN, ID_TRABAJO_ORIGEN, FECHA_ACTIVACION,
        ID_PRUEBAS, RESULTADO, ID_OBSERVACIONTRABAJO, ID_ANALISTA, FECHA_BAJA,
        USUARIO, FECHA, ACCION
    )
    VALUES (
        NEW.ID_TRABAJO, NEW.NIVEL, NEW.ID_RESERVA_ORIGEN, NEW.ID_TRABAJO_ORIGEN, NEW.FECHA_ACTIVACION,
        NEW.ID_PRUEBAS, NEW.RESULTADO, NEW.ID_OBSERVACIONTRABAJO, NEW.ID_ANALISTA, NEW.FECHA_BAJA,
        CURRENT_USER(), NOW(), 'Se insertó nueva cepa de trabajo'
    );
END //

DELIMITER ;

-- Trigger para auditar eliminaciones en CEPA_TRABAJO
DELIMITER //

CREATE TRIGGER tr_delete_cepa_trabajo
BEFORE DELETE ON CEPA_TRABAJO
FOR EACH ROW
BEGIN
    INSERT INTO CEPA_TRABAJO_AUDITORIA (
        ID_TRABAJO, NIVEL, ID_RESERVA_ORIGEN, ID_TRABAJO_ORIGEN, FECHA_ACTIVACION,
        ID_PRUEBAS, RESULTADO, ID_OBSERVACIONTRABAJO, ID_ANALISTA, FECHA_BAJA,
        USUARIO, FECHA, ACCION
    )
    VALUES (
        OLD.ID_TRABAJO, OLD.NIVEL, OLD.ID_RESERVA_ORIGEN, OLD.ID_TRABAJO_ORIGEN, OLD.FECHA_ACTIVACION,
        OLD.ID_PRUEBAS, OLD.RESULTADO, OLD.ID_OBSERVACIONTRABAJO, OLD.ID_ANALISTA, OLD.FECHA_BAJA,
        CURRENT_USER(), NOW(), 'Se eliminó una cepa de trabajo'
    );
END //

DELIMITER ;